/* code_tests_1.txt  :  trozos de código para testear algunas tareas de la
						fase 1 de la práctica CandyNDS (fase 1) */


/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1A 	*/
/*					(requiere tener implementada la tarea 1E)		*/
/* ---------------------------------------------------------------- */
int main(void)
{
	seed32 = time(NULL);		// fijar semilla de números aleatorios
	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1A)\n");
	printf("\x1b[38m\x1b[1;0H  nivel:");
	actualizar_contadores(1);

	do							// bucle principal de pruebas
	{
		inicializa_matriz(matrix, level);
		escribe_matriz_debug(matrix);
		retardo(5);
		printf("\x1b[39m\x1b[3;8H (pulse A o B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[3;8H              ");
		retardo(5);		
		if (keysHeld() & KEY_A)			// si pulsa 'A',
		{								// pasa a siguiente nivel
			level = (level + 1) % MAXLEVEL;
			actualizar_contadores(1);
		}
	} while (1);
	return(0);
}



/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1C 	*/
/*					(requiere tener implementada la tarea 1E)		*/
/* ---------------------------------------------------------------- */
int main(void)
{
	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1C)\n");
	printf("\x1b[38m\x1b[1;0H  nivel:");
	actualizar_contadores(1);

	do							// bucle principal de pruebas
	{
		copia_mapa(matrix, level);		// sustituye a inicializa_matriz()
		escribe_matriz_debug(matrix);
		if (hay_secuencia(matrix))			// si hay secuencias
			printf("\x1b[39m\x1b[3;0H hay secuencia: SI");
		else
			printf("\x1b[39m\x1b[3;0H hay secuencia: NO");
		retardo(5);
		printf("\x1b[38m\x1b[3;19H (pulse A/B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[3;0H                               ");
		retardo(5);
		if (keysHeld() & KEY_A)			// si pulsa 'A',
		{								// pasa a siguiente nivel
			level = (level + 1) % MAXLEVEL;
			actualizar_contadores(1);
		}
	} while (1);
	return(0);
}




/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1E 	*/
/* ---------------------------------------------------------------- */
#define NUMTESTS 14
short nmap[] = {4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 8};
short posX[] = {0, 0, 0, 0, 4, 4, 4, 0, 0, 5, 4, 1, 1, 1};
short posY[] = {2, 2, 2, 2, 4, 4, 4, 0, 0, 0, 4, 3, 3, 5};
short cori[] = {0, 1, 2, 3, 0, 1, 2, 0, 3, 0, 0, 1, 3, 0};
short resp[] = {1, 2, 1, 1, 2, 1, 1, 3, 1, 3, 5, 2, 4, 2};

int main(void)
{
	int ntest = 0;
	int result;

	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1E)\n");
	printf("\x1b[38m\x1b[1;0H  nivel:");
	level = nmap[0];
	actualizar_contadores(1);
	copia_mapa(matrix, level);
	escribe_matriz_debug(matrix);
	do							// bucle principal de pruebas
	{
		printf("\x1b[39m\x1b[2;0H test %d: posXY (%d, %d), c.ori %d",
									ntest, posX[ntest], posY[ntest], cori[ntest]);
		printf("\x1b[39m\x1b[3;0H resultado esperado: %d", resp[ntest]);
		
		result = cuenta_repeticiones(matrix, posY[ntest], posX[ntest], cori[ntest]);
		
		printf("\x1b[39m\x1b[4;0H resultado obtenido: %d", result);
		retardo(5);
		printf("\x1b[38m\x1b[5;19H (pulse A/B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[2;0H                               ");
		printf("\x1b[3;0H                               ");
		printf("\x1b[4;0H                               ");
		printf("\x1b[38m\x1b[5;19H            ");
		retardo(5);
		if (keysHeld() & KEY_A)		// si pulsa 'A',
		{
			ntest++;				// siguiente test
			if ((ntest < NUMTESTS) && (nmap[ntest] != level))
			{				// si número de mapa del siguiente test diferente
				level = nmap[ntest];		// del número de mapa actual,
				actualizar_contadores(1);		// cambiar el mapa actual
				copia_mapa(matrix, level);
				escribe_matriz_debug(matrix);
			}
		}
	} while (ntest < NUMTESTS);		// bucle de pruebas
	printf("\x1b[38m\x1b[5;19H (fin tests)");
	do { swiWaitForVBlank(); } while(1);	// bucle infinito
	return(0);
}


/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1G 	*/
/*					(requiere tener implementada la tarea 1E)		*/
/* ---------------------------------------------------------------- */
int main(void)
{
	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1G)\n");
	printf("\x1b[38m\x1b[1;0H  nivel:");
	actualizar_contadores(1);

	do							// bucle principal de pruebas
	{
		copia_mapa(matrix, level);		// sustituye a inicializa_matriz()
		escribe_matriz_debug(matrix);
		if (hay_combinacion(matrix))			// si hay combinaciones
			printf("\x1b[39m\x1b[3;0Hhay combinacion: SI");
		else
			printf("\x1b[39m\x1b[3;0Hhay combinacion: NO");
		retardo(5);
		printf("\x1b[38m\x1b[3;19H (pulse A/B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[3;0H                               ");
		retardo(5);
		if (keysHeld() & KEY_A)			// si pulsa 'A',
		{								// pasa a siguiente nivel
			level = (level + 1) % MAXLEVEL;
			actualizar_contadores(1);
		}
	} while (1);
	return(0);
}
